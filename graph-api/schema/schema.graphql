
"""
An ISO-8601 encoded UTC date string, for example `2022-02-21T10:57:54Z`.
"""
scalar DateTime

"""
A string representing an address (e.g. an Ethereum address).
"""
scalar Address

"""
Available options for the `orderBy` direction argument.
"""
enum OrderDirection {
    """
    Specifies an ascending order for a given `orderBy` argument.
    """
    ASC

    """
    Specifies a decending order for a given `orderBy` argument.
    """
    DESC
}

"""
Chain represents the chain and its networks.
"""
type Chain {
    """
    Chain ID.
    """
    id: ID!

    """
    Name of the chain, e.g. `Ethereum`.
    """
    name: String!

    """
    Description of the chain.
    """
    description: String!

    """
    Marketplaces on this chain.
    """
    marketplaces: [Marketplace!]

    """
    Collections found on this chain.
    """
    collections: [Collection!]
}

"""
Marketplace represents a single NFT marketplace (e.g. Opensea, DefiKingdoms).
"""
type Marketplace {
    """
    Marketplace ID.
    """
    id: ID!

    """
    Marketplace name, e.g. `Opensea`.
    """
    name: String!

    """
    Description of the marketplace.
    """
    description: String!

    """
    Marketplace website.
    """
    website: String

    """
    Chains the marketplace operates on.
    """
    chains: [Chain!]!

    """
    Collections on this marketplace.
    """
    collections: [Collection!]
}

"""
Collection represents a group of NFTs that share the same smart contract.
"""
type Collection {
    """
    Collection ID.
    """
    id: ID!

    """
    Collection name, e.g. `CryptoKitties`.
    """
    name: String!

    """
    Description of the collection.
    """
    description: String!

    """
    Address of the smart-contract.
    """
    address: Address!

    """
    Collection website.
    """
    website: String

    """
    URL of an image for the collection.
    """
    image_url: String

    """
    Base URI for the tokens from the collection, directing to e.g. a JSON file with token metadata.
    """
    token_uri: String!

    """
    Chain on which collection resides on.
    """
    chain: Chain!

    """
    Marketplaces this collection is on.
    """
    marketplaces: [Marketplace!]

    """
    List of NFTs that are part of this collection.
    """
    nfts: [NFT!]
}

"""
Ordering options for collections.
"""
input CollectionOrder {
    """
    Field by which collections should be sorted.
    """
    field: CollectionOrderField!

    """
    Direction in which collections should be sorted.
    """
    direction: OrderDirection!
}

"""
Properties by which collections can be ordered.
"""
enum CollectionOrderField {
    """
    Order by creation time.
    """
    CREATION_TIME

    """
    Order by market cap.
    """
    MARKET_CAP

    """
    Order by total volume.
    """
    TOTAL_VOLUME

    """
    Order by biggest gains.
    """
    BIGGEST_GAINS

    """
    Order by biggest losses.
    """
    BIGGEST_LOSSES

    """
    Order by daily volume.
    """
    DAILY_VOLUME
}

"""
NFT represents a single Non-Fungible Token.
"""
type NFT {
    """
    NFT ID.
    """
    id: ID!

    """
    Token ID, as found on the blockchain.
    """
    tokenID: String!

    """
    Address of the account that owns the NFT.
    """
    owner: Address!

    """
    Rarity score for the NFT.
    """
    rarity: Float!

    """
    Collection this NFT is part of.
    """
    collection: Collection!
}

"""
Ordering options for NFTs.
"""
input NFTOrder {
    """
    Field by which NFTs should be sorted by.
    """
    field: NFTOrderField!

    """
    Direction in which NFTs should be sorted.
    """
    direction: OrderDirection!
}

"""
Properties by which NFTs could be ordered by.
"""
enum NFTOrderField {
    """
    Order by creation time.
    """
    CREATION_TIME

    """
    Order by rarity.
    """
    RARITY

    """
    Order by value.
    """
    VALUE
}

"""
The query root of NFT.com GraphQL interface.
"""
type Query {

    """
    Get a single chain.
    """
    chain(
        """
        ID of the Chain.
        """
        id: ID!
    ): Chain

    """
    List chains.
    """
    chains: [Chain!]

    """
    Get a single NFT.
    """
    nft(
        """
        ID of the NFT.
        """
        id: ID!
    ): NFT

    """
    Get a single NFT by its token ID.
    """
    nftByTokenID(
        """
        Chain ID.
        """
        chainID: ID!

        """
        ID of the smart contract.
        """
        contract: Address!

        """
        Token ID of the NFT.
        """
        tokenID: String!
    ): NFT

    """
    Lookup NFTs based on specified criteria.
    """
    nfts(
        """
        Owner of the NFT.
        """
        owner: Address
        
        """
        ID of the collection the NFT is part of.
        """
        collection: ID

        """
        Minimum rarity score.
        """
        rarityMin: Float
        
        """
        Ordering options for the returned NFTs.
        """
        orderBy: NFTOrder = { field: CREATION_TIME, direction: DESC }
    ): [NFT!]

    """
    Get a single collection.
    """
    collection(
        """
        ID of the collection.
        """
        id: ID!
    ): Collection

    """
    Get a single collection by address.
    """
    collectionByAddress(
        """
        Chain ID.
        """
        chainID: ID!

        """
        Address of the smart contract.
        """
        contract: Address!
    ): Collection

    """
    Lookup collections based on specified criteria.
    """
    collections(
        """
        ID of the chain that the collection is on.
        """
        chain: ID
        
        """
        Ordering options for the returned collections.
        """
        orderBy: CollectionOrder = { field: CREATION_TIME, direction: DESC }
    ): [Collection!]
}
