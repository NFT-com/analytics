{
	"info": {
		"_postman_id": "a8f7fe1b-f42e-4a38-9b67-59f92fb97509",
		"name": "Optakt Indexer/Analytics",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20061059"
	},
	"item": [
		{
			"name": "Aggregation",
			"item": [
				{
					"name": "Collection - Current",
					"item": [
						{
							"name": "Volume",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/volume",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"volume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sales",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/sales",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"sales"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch volume",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ids\": [\r\n        \"{{batch-collection-id-1}}\",\r\n        \"{{batch-collection-id-2}}\",\r\n        \"{{batch-collection-id-3}}\",\r\n        \"{{batch-collection-id-4}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/batch/volume",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"batch",
										"volume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch market cap",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ids\": [\r\n        \"{{batch-collection-id-1}}\",\r\n        \"{{batch-collection-id-2}}\",\r\n        \"{{batch-collection-id-3}}\",\r\n        \"{{batch-collection-id-4}}\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/batch/market_cap",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"batch",
										"market_cap"
									]
								}
							},
							"response": []
						},
						{
							"name": "Market Cap",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/market_cap",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"market_cap"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Collection - History",
					"item": [
						{
							"name": "Volume",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/volume/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"volume",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Market cap",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/market_cap/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"market_cap",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sales",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/sales/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"sales",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Average price",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/average/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"average",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Size",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/size/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"size",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Floor",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/collection/{{collection-id}}/floor/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"collection",
										"{{collection-id}}",
										"floor",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NFT - Current",
					"item": [
						{
							"name": "Price",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/nft/{{nft-id}}/price",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"nft",
										"{{nft-id}}",
										"price"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch price",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ids\": [\r\n        \"{{batch-nft-id-1}}\",\r\n        \"{{batch-nft-id-2}}\",\r\n        \"{{batch-nft-id-3}}\",\r\n        \"{{batch-nft-id-4}}\",\r\n        \"{{batch-nft-id-5}}\",\r\n        \"{{batch-nft-id-6}}\",\r\n        \"{{batch-nft-id-7}}\",\r\n        \"{{batch-nft-id-8}}\",\r\n        \"{{batch-nft-id-9}}\",\r\n        \"{{batch-nft-id-10}}\"\r\n    ]\r\n}"
								},
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/nft/batch/price",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"nft",
										"batch",
										"price"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NFT - History",
					"item": [
						{
							"name": "Price",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/nft/{{nft-id}}/price/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"nft",
										"{{nft-id}}",
										"price",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Average",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/nft/{{nft-id}}/price",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"nft",
										"{{nft-id}}",
										"price"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Marketplace - Current",
					"item": [
						{
							"name": "Volume",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/volume",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"volume"
									]
								}
							},
							"response": []
						},
						{
							"name": "Market Cap",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/market_cap",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"market_cap"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sales",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/sales",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"sales"
									]
								}
							},
							"response": []
						},
						{
							"name": "Users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/users",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Marketplace - History",
					"item": [
						{
							"name": "Volume",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/volume/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"volume",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Market Cap",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/market_cap/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"market_cap",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sales",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/sales/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"sales",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Users",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{aggregation_hostname}}:{{port}}/marketplace/{{marketplace-id}}/users/history?from={{date-from}}&to={{date-to}}",
									"protocol": "{{scheme}}",
									"host": [
										"{{aggregation_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"marketplace",
										"{{marketplace-id}}",
										"users",
										"history"
									],
									"query": [
										{
											"key": "from",
											"value": "{{date-from}}"
										},
										{
											"key": "to",
											"value": "{{date-to}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Graph",
			"item": [
				{
					"name": "Network",
					"item": [
						{
							"name": "Get Network",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    network(id: $id) {\r\n        id\r\n        name\r\n        description\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"94c754fe-e06c-4d2b-bb76-2faa240b5bb8\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Network with Collections",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    network(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        collections {\r\n            id\r\n            name\r\n            description\r\n            address\r\n            website\r\n            image_url\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"94c754fe-e06c-4d2b-bb76-2faa240b5bb8\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Network with Marketplaces",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    network(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        marketplaces {\r\n            id\r\n            name\r\n            description\r\n            website\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"94c754fe-e06c-4d2b-bb76-2faa240b5bb8\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "NFT",
					"item": [
						{
							"name": "Get NFT",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    nft(id: $id) {\r\n       id\r\n       name\r\n       description\r\n       image_url\r\n       token_id\r\n       uri\r\n       rarity\r\n       owners {\r\n           address\r\n           number\r\n       }\r\n       traits {\r\n           name\r\n           value\r\n           rarity\r\n       }\r\n       trading_price\r\n       average_price\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"62b92c13-b7e9-5808-af12-c0c5b5cdc427\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NFT with multiple owners",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    nft(id: $id) {\r\n       id\r\n       name\r\n       description\r\n       image_url\r\n       token_id\r\n       uri\r\n       rarity\r\n       owners {\r\n           address\r\n           number\r\n       }\r\n       traits {\r\n           name\r\n           value\r\n           rarity\r\n       }\r\n       collection {\r\n           id\r\n           name\r\n       }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"52ad872d-cd97-fbd9-12cf-43a685888b7c\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NFT with rarity and trait rarity",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    nft(id: $id) {\r\n       id\r\n       token_id\r\n       image_url\r\n       uri\r\n       rarity\r\n       traits {\r\n           name\r\n           value\r\n           rarity\r\n       }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"83ec1393-efa0-770d-4c78-d25504aa7658\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get NFTby token ID with rarity and trait rarity",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($network_id: ID!, $contract: Address!, $token_id: String!) {\r\n    nft_by_token_id(network_id: $network_id, contract: $contract, token_id: $token_id) {\r\n       id\r\n       token_id\r\n       image_url\r\n       uri\r\n       rarity\r\n       owners {\r\n           address\r\n           number\r\n       }\r\n       traits {\r\n           name\r\n           value\r\n           rarity\r\n       }\r\n    }\r\n}",
										"variables": "{\r\n    \"network_id\": \"94c754fe-e06c-4d2b-bb76-2faa240b5bb8\",\r\n    \"contract\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\",\r\n    \"token_id\": \"2113\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lookup NFTs by collection and rarity",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($collection: ID, $rarity_max: Float) {\r\n    nfts(collection: $collection, rarity_max: $rarity_max) {\r\n        id\r\n        token_id\r\n        image_url\r\n        uri\r\n        rarity\r\n    }\r\n}",
										"variables": "{\r\n   \"collection\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\",\r\n   \"rarity_max\" : 0.0000000004\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Lookup NFTs by collection and rarity, incl owners",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($owner: Address, $collection: ID) {\r\n    nfts(owner: $owner, collection: $collection) {\r\n        id\r\n        token_id\r\n        image_url\r\n        uri\r\n        rarity\r\n        owners {\r\n            address\r\n            number\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n   \"owner\": \"0xd311bDACB151b72BddFEE9cBdC414Af22a5E38dc\",\r\n   \"collection\": \"37f5eff7-e355-4d8b-9a35-8bfa4f819fef\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Collection",
					"item": [
						{
							"name": "Get Collection",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection by address",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($network_id: ID!, $contract: Address!) {\r\n    collection_by_address(network_id: $network_id, contract: $contract) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n    }\r\n}",
										"variables": "{\r\n    \"network_id\": \"94c754fe-e06c-4d2b-bb76-2faa240b5bb8\",\r\n    \"contract\": \"0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection with NFTs",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n        nfts {\r\n            edges {\r\n                node {\r\n                    id\r\n                    token_id\r\n                    uri\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection with NFTs, paginated - first 200",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n        nfts(first: 200) {\r\n            edges {\r\n                node {\r\n                    id\r\n                    token_id\r\n                    uri\r\n                }\r\n                cursor\r\n            }\r\n            pageInfo {\r\n                hasNextPage\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection with NFTs, paginated - continue after cursor",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n        nfts(first: 200, after: \"MDZjZjM3MGMtYjQ5ZS0zOTQzLTYwOTktMzE2MDk0Y2U3OWNi\") {\r\n            edges {\r\n                node {\r\n                    id\r\n                    token_id\r\n                    uri\r\n                }\r\n                cursor\r\n            }\r\n            pageInfo {\r\n                hasNextPage\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection with NFTs, incl owners",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n        nfts {\r\n            edges {\r\n                node {\r\n                    id\r\n                    token_id\r\n                    uri\r\n                    owners {\r\n                        number\r\n                        address\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection with NFTs with traits",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n        nfts {\r\n            edges {\r\n                node {\r\n                    id\r\n                    token_id\r\n                    uri\r\n                    traits {\r\n                        name\r\n                        value\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection with NFTs with rarity",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n        nfts {\r\n            edges {\r\n                node {\r\n                    id\r\n                    token_id\r\n                    uri\r\n                    rarity\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Collection with NFTs with rarity and trait rarity",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query($id: ID!) {\r\n    collection(id: $id) {\r\n        id\r\n        name\r\n        description\r\n        address\r\n        website\r\n        image_url\r\n        nfts {\r\n            edges {\r\n                node {\r\n                    id\r\n                    token_id\r\n                    uri\r\n                    rarity\r\n                    traits {\r\n                        name\r\n                        value\r\n                        rarity\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}",
										"variables": "{\r\n    \"id\": \"612ecc22-36ef-4ef7-bb0b-5b864b85d089\"\r\n}"
									}
								},
								"url": {
									"raw": "{{scheme}}://{{graph_hostname}}:{{port}}/graphql",
									"protocol": "{{scheme}}",
									"host": [
										"{{graph_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Sales",
					"item": [
						{
							"name": "Block range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that events are from the requested block range.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let start = BigInt(pm.request.url.query.get('start_height'));\r",
											"let end = BigInt(pm.request.url.query.get('end_height'));\r",
											"\r",
											"response.sales.forEach(function(sales) {\r",
											"    \r",
											"    let block = BigInt(sales.block_number);\r",
											"    pm.test(\"Sale is from the expected block range\", function() {\r",
											"        pm.expect(start <= block)\r",
											"        pm.expect(block <= end)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?start_height=14232100&end_height=14232170",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "start_height",
											"value": "14232100"
										},
										{
											"key": "end_height",
											"value": "14232170"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Time range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Parse the start and end parameters.\r",
											"let start = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(sale.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end)).to.be.true\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?start_timestamp=2022-02-20T00:00:00Z&end_timestamp=2022-02-20T00:01:00Z",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "start_timestamp",
											"value": "2022-02-20T00:00:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2022-02-20T00:01:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Time range - paging - first page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Parse the start and end parameters.\r",
											"let start = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(sale.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end)).to.be.true\r",
											"    });\r",
											"})\r",
											"\r",
											"// Verify that the response has a token for the next page.\r",
											"let nextPageToken = response.next_page;\r",
											"pm.test(\"Event list has a token for the next page\", function() {\r",
											"    pm.expect(nextPageToken).is.not.empty\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?start_timestamp=2022-02-20T00:00:00Z&end_timestamp=2022-02-20T00:04:00Z",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "start_timestamp",
											"value": "2022-02-20T00:00:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2022-02-20T00:04:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Time range - paging - last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Parse the start and end parameters.\r",
											"let start = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(sale.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end)).to.be.true\r",
											"    });\r",
											"})\r",
											"\r",
											"// Verify that the response does not have a token for the next page.\r",
											"let nextPageToken = response.next_page;\r",
											"pm.test(\"Event list does not have a token for the next page\", function() {\r",
											"    pm.expect(nextPageToken).is.equal(undefined);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?start_timestamp=2022-02-20T00:00:00Z&end_timestamp=2022-02-20T00:04:00Z&page=MTQyMzk1Nzg6Mjk5",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "start_timestamp",
											"value": "2022-02-20T00:00:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2022-02-20T00:04:00Z"
										},
										{
											"key": "page",
											"value": "MTQyMzk1Nzg6Mjk5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Sales between accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all sales are from the correct sender and have \r",
											"// the correct receiver.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let sender = pm.request.url.query.get('seller_address');\r",
											"let receiver = pm.request.url.query.get('buyer_address');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"    pm.test(\"Transfer is from the correct sender\", function() {\r",
											"        pm.expect(sale.seller_address).to.be.eq(sender)\r",
											"    });\r",
											"    pm.test(\"Transfer is to the correct receiver\", function() {\r",
											"        pm.expect(sale.buyer_address).to.be.eq(receiver)\r",
											"    });\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?seller_address=0xe86073b90666547b822887CFd7d4E6E973906e5C&buyer_address=0x14D702Bd1Ae7a48Df5D33c7F873aA353BbC7446d",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "seller_address",
											"value": "0xe86073b90666547b822887CFd7d4E6E973906e5C"
										},
										{
											"key": "buyer_address",
											"value": "0x14D702Bd1Ae7a48Df5D33c7F873aA353BbC7446d"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "From seller",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all sales are from the correct sender and have \r",
											"// the correct receiver.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let sender = pm.request.url.query.get('seller_address');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"    pm.test(\"Sale is from the correct seller\", function() {\r",
											"        pm.expect(sale.seller_address).to.be.eq(sender)\r",
											"    });\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?seller_address=0xBe8EDBa2Bf6a443c36342980681391E640639B9B",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "seller_address",
											"value": "0xBe8EDBa2Bf6a443c36342980681391E640639B9B"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "To buyer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all sales are from the correct sender and have \r",
											"// the correct receiver.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let receiver = pm.request.url.query.get('buyer_address');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"    pm.test(\"Sale is to the correct buyer\", function() {\r",
											"        pm.expect(sale.buyer_address).to.be.eq(receiver)\r",
											"    });\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?buyer_address=0xd4fB8A295c9dDc47063f4c83Bab973E6140A42d8",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "buyer_address",
											"value": "0xd4fB8A295c9dDc47063f4c83Bab973E6140A42d8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "On marketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are from the correct collection.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let chainID = parseInt(pm.request.url.query.get('chain_id'));\r",
											"let marketplace = pm.request.url.query.get('marketplace_address');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"    pm.test(\"Sale is on the correct marketplace\", function() {\r",
											"        pm.expect(sale.marketplace_address).to.be.eq(marketplace)\r",
											"    });\r",
											"     pm.test(\"Sale is on the correct chain\", function() {\r",
											"        pm.expect(sale.chain_id).to.be.eq(chainID)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?marketplace_address=0x7f268357A8c2552623316e2562D90e642bB538E5&chain_id=1",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "marketplace_address",
											"value": "0x7f268357A8c2552623316e2562D90e642bB538E5"
										},
										{
											"key": "chain_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "From collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are from the correct collection.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let chainID = parseInt(pm.request.url.query.get('chain_id'));\r",
											"let collection = pm.request.url.query.get('collection_address');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"    pm.test(\"Sale is from the correct collection\", function() {\r",
											"        pm.expect(sale.collection_address).to.be.eq(collection)\r",
											"    });\r",
											"     pm.test(\"Sale is from the correct chain\", function() {\r",
											"        pm.expect(sale.chain_id).to.be.eq(chainID)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?collection_address=&chain_id=1",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "collection_address",
											"value": ""
										},
										{
											"key": "chain_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are from the correct transaction.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expected = pm.request.url.query.get('transaction_hash');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"    pm.test(\"Sale is from the correct transaction\", function() {\r",
											"        pm.expect(sale.transaction_hash).to.be.eq(expected)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?transaction_hash=0x7ec5da3b14b517c5234ec19585d0211f9b9d37383c275365041ff977f7b0a114",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "transaction_hash",
											"value": "0x7ec5da3b14b517c5234ec19585d0211f9b9d37383c275365041ff977f7b0a114"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Specific NFT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are of the correct NFT.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let chainID = parseInt(pm.request.url.query.get('chain_id'));\r",
											"let collection = pm.request.url.query.get('collection_address');\r",
											"let tokenID = pm.request.url.query.get('token_id');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"     pm.test(\"Sale is on the correct chain\", function() {\r",
											"        pm.expect(sale.chain_id).to.be.eq(chainID)\r",
											"    });\r",
											"    pm.test(\"Sale is from the correct collection\", function() {\r",
											"        pm.expect(sale.collection_address).to.be.eq(collection)\r",
											"    });\r",
											"    pm.test(\"Sale is of the correct token ID\", function() {\r",
											"        pm.expect(sale.token_id).to.be.eq(tokenID)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?collection_address=&chain_id=1&token_id=",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "collection_address",
											"value": ""
										},
										{
											"key": "chain_id",
											"value": "1"
										},
										{
											"key": "token_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Price range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that events are from the requested block range.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let start = BigInt(pm.request.url.query.get('start_price'));\r",
											"let end = BigInt(pm.request.url.query.get('end_price'));\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"    \r",
											"    let price = BigInt(sale.trade_price);\r",
											"    pm.test(\"Price is in the expected price range\", function() {\r",
											"        pm.expect(start <= price)\r",
											"        pm.expect(price <= end)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?start_price=134000000000000000000000000&end_price=344000000000000000000000000",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "start_price",
											"value": "134000000000000000000000000"
										},
										{
											"key": "end_price",
											"value": "344000000000000000000000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Combined filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let chainID = parseInt(pm.request.url.query.get('chain_id'));\r",
											"let collection = pm.request.url.query.get('collection_address');\r",
											"let tokenID = pm.request.url.query.get('token_id');\r",
											"\r",
											"let start_height = BigInt(pm.request.url.query.get('start_height'));\r",
											"let end_height = BigInt(pm.request.url.query.get('end_height'));\r",
											"\r",
											"// Parse the start and end time parameters.\r",
											"let start_timestamp = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end_timestamp = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"let seller = pm.request.url.query.get('seller_address');\r",
											"let buyer = pm.request.url.query.get('buyer_address');\r",
											"\r",
											"let transaction = pm.request.url.query.get('transaction_hash');\r",
											"\r",
											"response.sales.forEach(function(sale) {\r",
											"\r",
											"     pm.test(\"Sale is on the correct chain\", function() {\r",
											"        pm.expect(sale.chain_id).to.be.eq(chainID)\r",
											"    });\r",
											"    pm.test(\"Sale is from the correct collection\", function() {\r",
											"        pm.expect(sale.collection_address).to.be.eq(collection)\r",
											"    });\r",
											"    pm.test(\"Sale is of the correct token ID\", function() {\r",
											"        pm.expect(sale.token_id).to.be.eq(tokenID)\r",
											"    });\r",
											"\r",
											"\r",
											"     pm.test(\"Sale is from the expected block range\", function() {\r",
											"        pm.expect(start_height <= sale.block_number)\r",
											"        pm.expect(sale.block_number <= end_height)\r",
											"    });\r",
											"\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(sale.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start_timestamp)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end_timestamp)).to.be.true\r",
											"    });\r",
											"\r",
											"    pm.test(\"Sale is from the correct seller\", function() {\r",
											"        pm.expect(sale.seller_address).to.be.eq(seller)\r",
											"    });\r",
											"    pm.test(\"Sale is to the correct buyer\", function() {\r",
											"        pm.expect(sale.buyer_address).to.be.eq(buyer)\r",
											"    });\r",
											"\r",
											"    pm.test(\"Sale is from the correct transaction\", function() {\r",
											"        pm.expect(sale.transaction_hash).to.be.eq(transaction)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/sales/?chain_id=1&start_height=14237210&end_height=14237220&start_timestamp=2022-02-19T00:00:00Z&end_timestamp=2022-02-23T00:00:00Z&transaction_hash=0xb9889ad63c68d3b068bf22a103193abfd9f318d3b0d2917c9149eb7a63fb2a7b&seller_address=0xe86073b90666547b822887CFd7d4E6E973906e5C&buyer_address=0x14D702Bd1Ae7a48Df5D33c7F873aA353BbC7446d&marketplace_address=0x7f268357A8c2552623316e2562D90e642bB538E5&start_price=140000000000000000&end_price=160000000000000000&collection_address=&token_id=",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"sales",
										""
									],
									"query": [
										{
											"key": "chain_id",
											"value": "1"
										},
										{
											"key": "start_height",
											"value": "14237210"
										},
										{
											"key": "end_height",
											"value": "14237220"
										},
										{
											"key": "start_timestamp",
											"value": "2022-02-19T00:00:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2022-02-23T00:00:00Z"
										},
										{
											"key": "transaction_hash",
											"value": "0xb9889ad63c68d3b068bf22a103193abfd9f318d3b0d2917c9149eb7a63fb2a7b"
										},
										{
											"key": "seller_address",
											"value": "0xe86073b90666547b822887CFd7d4E6E973906e5C"
										},
										{
											"key": "buyer_address",
											"value": "0x14D702Bd1Ae7a48Df5D33c7F873aA353BbC7446d"
										},
										{
											"key": "marketplace_address",
											"value": "0x7f268357A8c2552623316e2562D90e642bB538E5"
										},
										{
											"key": "start_price",
											"value": "140000000000000000"
										},
										{
											"key": "end_price",
											"value": "160000000000000000"
										},
										{
											"key": "collection_address",
											"value": ""
										},
										{
											"key": "token_id",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Transfers",
					"item": [
						{
							"name": "Block range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that events are from the requested block range.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let start = BigInt(pm.request.url.query.get('start_height'));\r",
											"let end = BigInt(pm.request.url.query.get('end_height'));\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"    \r",
											"    let block = BigInt(transfer.block_number);\r",
											"    pm.test(\"Transfer is from the expected block range\", function() {\r",
											"        pm.expect(start <= block)\r",
											"        pm.expect(block <= end)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?start_height=14232120&end_height=14235000",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "start_height",
											"value": "14232120"
										},
										{
											"key": "end_height",
											"value": "14235000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Time range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Parse the start and end parameters.\r",
											"let start = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(transfer.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end)).to.be.true\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?start_timestamp=2022-03-20T00:00:00Z&end_timestamp=2022-03-20T00:45:00Z",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "start_timestamp",
											"value": "2022-03-20T00:00:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2022-03-20T00:45:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Time range - paging - first page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Parse the start and end parameters.\r",
											"let start = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(transfer.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end)).to.be.true\r",
											"    });\r",
											"})\r",
											"\r",
											"// Verify that the response has a token for the next page.\r",
											"let nextPageToken = response.next_page;\r",
											"pm.test(\"Event list has a token for the next page\", function() {\r",
											"    pm.expect(nextPageToken).is.not.empty\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?start_timestamp=2022-03-20T00:00:00Z&end_timestamp=2022-03-20T01:15:00Z",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "start_timestamp",
											"value": "2022-03-20T00:00:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2022-03-20T01:15:00Z"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Time range - paging - last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"// Parse the start and end parameters.\r",
											"let start = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(transfer.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end)).to.be.true\r",
											"    });\r",
											"})\r",
											"\r",
											"// Verify that the response does not have a token for the next page.\r",
											"let nextPageToken = response.next_page;\r",
											"pm.test(\"Event list does not have a token for the next page\", function() {\r",
											"    pm.expect(nextPageToken).is.equal(undefined);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?start_timestamp=2022-03-20T00:00:00Z&end_timestamp=2022-03-20T01:15:00Z&page=MTQ0MjAxMTY6MTYw",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "start_timestamp",
											"value": "2022-03-20T00:00:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2022-03-20T01:15:00Z"
										},
										{
											"key": "page",
											"value": "MTQ0MjAxMTY6MTYw"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transaction filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are from the correct transaction.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let expected = pm.request.url.query.get('transaction_hash');\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"    pm.test(\"Transfer is from the correct transaction\", function() {\r",
											"        pm.expect(transfer.transaction_hash).to.be.eq(expected)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?transaction_hash=0x3fe9f8fe435995cd0a0b75a587d64056d008f201270d08e9de06c8902c9cd7c8",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "transaction_hash",
											"value": "0x3fe9f8fe435995cd0a0b75a587d64056d008f201270d08e9de06c8902c9cd7c8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Transfers between accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are from the correct sender and have \r",
											"// the correct receiver.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let sender = pm.request.url.query.get('sender_address');\r",
											"let receiver = pm.request.url.query.get('receiver_address');\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"    pm.test(\"Transfer is from the correct sender\", function() {\r",
											"        pm.expect(transfer.sender_address).to.be.eq(sender)\r",
											"    });\r",
											"    pm.test(\"Transfer is to the correct receiver\", function() {\r",
											"        pm.expect(transfer.receiver_address).to.be.eq(receiver)\r",
											"    });\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?sender_address=0x6B7B53a1D3F86bb5CCff4e2c98A069D933865eB2&receiver_address=0xd311bDACB151b72BddFEE9cBdC414Af22a5E38dc",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "sender_address",
											"value": "0x6B7B53a1D3F86bb5CCff4e2c98A069D933865eB2"
										},
										{
											"key": "receiver_address",
											"value": "0xd311bDACB151b72BddFEE9cBdC414Af22a5E38dc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "From Sender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are from the correct sender.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let sender = pm.request.url.query.get('sender_address');\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"    pm.test(\"Transfer is from the correct sender\", function() {\r",
											"        pm.expect(transfer.sender_address).to.be.eq(sender)\r",
											"    });\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?sender_address=0x66FE7D121dc89Be573CFb8bf67665324628347A0",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "sender_address",
											"value": "0x66FE7D121dc89Be573CFb8bf67665324628347A0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "To Receiver",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are to the correct receiver.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let receiver = pm.request.url.query.get('receiver_address');\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"    pm.test(\"Transfer is to the correct receiver\", function() {\r",
											"        pm.expect(transfer.receiver_address).to.be.eq(receiver)\r",
											"    });\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?receiver_address=0x87ad0267b437575b58624AFbB67AD3a7f6876566",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "receiver_address",
											"value": "0x87ad0267b437575b58624AFbB67AD3a7f6876566"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "From collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are from the correct collection.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let chainID = parseInt(pm.request.url.query.get('chain_id'));\r",
											"let collection = pm.request.url.query.get('collection_address');\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"    pm.test(\"Transfer is from the correct collection\", function() {\r",
											"        pm.expect(transfer.collection_address).to.be.eq(collection)\r",
											"    });\r",
											"     pm.test(\"Transfer is from the correct chain\", function() {\r",
											"        pm.expect(transfer.chain_id).to.be.eq(chainID)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?collection_address=0xbcd4F1EcFf4318e7A0c791C7728f3830Db506C71&chain_id=1",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "collection_address",
											"value": "0xbcd4F1EcFf4318e7A0c791C7728f3830Db506C71"
										},
										{
											"key": "chain_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Specific NFT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that all events are of the correct NFT.\r",
											"let response = pm.response.json();\r",
											"\r",
											"let chainID = parseInt(pm.request.url.query.get('chain_id'));\r",
											"let collection = pm.request.url.query.get('collection_address');\r",
											"let tokenID = pm.request.url.query.get('token_id');\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"     pm.test(\"Transfer is on the correct chain\", function() {\r",
											"        pm.expect(transfer.chain_id).to.be.eq(chainID)\r",
											"    });\r",
											"    pm.test(\"Transfer is from the correct collection\", function() {\r",
											"        pm.expect(transfer.collection_address).to.be.eq(collection)\r",
											"    });\r",
											"    pm.test(\"Transfer is of the correct token ID\", function() {\r",
											"        pm.expect(transfer.token_id).to.be.eq(tokenID)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?chain_id=1&collection_address=0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D&token_id=3447",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "chain_id",
											"value": "1"
										},
										{
											"key": "collection_address",
											"value": "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"
										},
										{
											"key": "token_id",
											"value": "3447"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Combined filters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const moment = require(\"moment\")\r",
											"\r",
											"let response = pm.response.json();\r",
											"\r",
											"let chainID = parseInt(pm.request.url.query.get('chain_id'));\r",
											"let collection = pm.request.url.query.get('collection_address');\r",
											"let tokenID = pm.request.url.query.get('token_id');\r",
											"\r",
											"let start_height = BigInt(pm.request.url.query.get('start_height'));\r",
											"let end_height = BigInt(pm.request.url.query.get('end_height'));\r",
											"\r",
											"// Parse the start and end time parameters.\r",
											"let start_timestamp = moment(decodeURI(pm.request.url.query.get('start_timestamp')));\r",
											"let end_timestamp = moment(decodeURI(pm.request.url.query.get('end_timestamp')));\r",
											"\r",
											"let sender = pm.request.url.query.get('sender_address');\r",
											"let receiver = pm.request.url.query.get('receiver_address');\r",
											"\r",
											"let transaction = pm.request.url.query.get('transaction_hash');\r",
											"\r",
											"response.transfers.forEach(function(transfer) {\r",
											"\r",
											"     pm.test(\"Transfer is on the correct chain\", function() {\r",
											"        pm.expect(transfer.chain_id).to.be.eq(chainID)\r",
											"    });\r",
											"    pm.test(\"Transfer is from the correct collection\", function() {\r",
											"        pm.expect(transfer.collection_address).to.be.eq(collection)\r",
											"    });\r",
											"    pm.test(\"Transfer is of the correct token ID\", function() {\r",
											"        pm.expect(transfer.token_id).to.be.eq(tokenID)\r",
											"    });\r",
											"\r",
											"\r",
											"     pm.test(\"Transfer is from the expected block range\", function() {\r",
											"        pm.expect(start_height <= transfer.block_number)\r",
											"        pm.expect(transfer.block_number <= end_height)\r",
											"    });\r",
											"\r",
											"\r",
											"    // Parse the event timestamp.\r",
											"    let ts = moment(transfer.emitted_at);\r",
											"    pm.test(\"Event timestamp is valid\", function() {\r",
											"        pm.expect(ts.isValid()).to.be.true\r",
											"    });\r",
											"\r",
											"    // Verify the event timestamp is within the set limits.\r",
											"    pm.test(\"Event timestamp is after the start threshold\", function() {\r",
											"        pm.expect(ts.isSameOrAfter(start_timestamp)).to.be.true\r",
											"    });\r",
											"    pm.test(\"Event timestamp is before the end threshold\", function() {\r",
											"        pm.expect(ts.isSameOrBefore(end_timestamp)).to.be.true\r",
											"    });\r",
											"\r",
											"    pm.test(\"Transfer is from the correct sender\", function() {\r",
											"        pm.expect(transfer.sender_address).to.be.eq(sender)\r",
											"    });\r",
											"    pm.test(\"Transfer is to the correct receiver\", function() {\r",
											"        pm.expect(transfer.receiver_address).to.be.eq(receiver)\r",
											"    });\r",
											"\r",
											"    pm.test(\"Transfer is from the correct transaction\", function() {\r",
											"        pm.expect(transfer.transaction_hash).to.be.eq(transaction)\r",
											"    });\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{scheme}}://{{event_hostname}}:{{port}}/transfers/?chain_id=1&collection_address=0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D&token_id=3447&start_height=12666906&end_height=12666909&start_timestamp=2021-06-19T20:19:00Z&end_timestamp=2021-06-19T20:20:00Z&transaction_hash=0x999854e4508d2b211f65505ae28197db717d324bdf56ca96fa45fc74bfaf43ad&sender_address=0x059B738209B28F91D42e0f44746a47E8d2DbD266&receiver_address=0xfC7b2CbF780ca8BFF61002a0018c3aA919426C0F",
									"protocol": "{{scheme}}",
									"host": [
										"{{event_hostname}}"
									],
									"port": "{{port}}",
									"path": [
										"transfers",
										""
									],
									"query": [
										{
											"key": "chain_id",
											"value": "1"
										},
										{
											"key": "collection_address",
											"value": "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"
										},
										{
											"key": "token_id",
											"value": "3447"
										},
										{
											"key": "start_height",
											"value": "12666906"
										},
										{
											"key": "end_height",
											"value": "12666909"
										},
										{
											"key": "start_timestamp",
											"value": "2021-06-19T20:19:00Z"
										},
										{
											"key": "end_timestamp",
											"value": "2021-06-19T20:20:00Z"
										},
										{
											"key": "transaction_hash",
											"value": "0x999854e4508d2b211f65505ae28197db717d324bdf56ca96fa45fc74bfaf43ad"
										},
										{
											"key": "sender_address",
											"value": "0x059B738209B28F91D42e0f44746a47E8d2DbD266"
										},
										{
											"key": "receiver_address",
											"value": "0xfC7b2CbF780ca8BFF61002a0018c3aA919426C0F"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "collection-id",
			"value": "612ecc22-36ef-4ef7-bb0b-5b864b85d089",
			"type": "string"
		},
		{
			"key": "batch-collection-id-1",
			"value": "612ecc22-36ef-4ef7-bb0b-5b864b85d089",
			"type": "string"
		},
		{
			"key": "batch-collection-id-2",
			"value": "42321e81-38a8-4a3d-8ee9-4a9b4ad68d1b",
			"type": "string"
		},
		{
			"key": "batch-collection-id-3",
			"value": "37f5eff7-e355-4d8b-9a35-8bfa4f819fef",
			"type": "string"
		},
		{
			"key": "batch-collection-id-4",
			"value": "c34f1bd8-c0d9-47d8-b4a4-6447a019a9cd",
			"type": "string"
		},
		{
			"key": "date-from",
			"value": "2022-05-01",
			"type": "string"
		},
		{
			"key": "date-to",
			"value": "2022-06-01",
			"type": "string"
		},
		{
			"key": "nft-id",
			"value": "2d8c78d3-5d2d-aafb-291d-f31f6b4cb5fd",
			"type": "string"
		},
		{
			"key": "batch-nft-id-1",
			"value": "83ec1393-efa0-770d-4c78-d25504aa7658",
			"type": "string"
		},
		{
			"key": "batch-nft-id-2",
			"value": "5f09e248-5a85-24d6-0423-c8d39e9f3611",
			"type": "string"
		},
		{
			"key": "batch-nft-id-3",
			"value": "291f79bd-598a-e384-a88c-2450efcb7612",
			"type": "string"
		},
		{
			"key": "batch-nft-id-4",
			"value": "a74ee48a-81f2-d2a3-c5a1-779227dc2271",
			"type": "string"
		},
		{
			"key": "batch-nft-id-5",
			"value": "3c95ed47-6183-cd5d-699a-0663c0fe1b1f",
			"type": "string"
		},
		{
			"key": "batch-nft-id-6",
			"value": "c9645538-a69f-bbec-c346-3cfcb928f5cf",
			"type": "string"
		},
		{
			"key": "batch-nft-id-7",
			"value": "3ecdc4da-c9fe-1ec7-b2c9-bb84a06a369e",
			"type": "string"
		},
		{
			"key": "batch-nft-id-8",
			"value": "9182cff9-7d8d-2423-87fe-2e25e8bc56bf",
			"type": "string"
		},
		{
			"key": "batch-nft-id-9",
			"value": "f0755716-b4b2-0ee4-9a5b-05d87d92c6ca",
			"type": "string"
		},
		{
			"key": "batch-nft-id-10",
			"value": "a1284652-c4a5-5fa3-0ff7-ee8f7ead7b15",
			"type": "string"
		},
		{
			"key": "marketplace-id",
			"value": "df87df1d-f0a1-4e53-b2c3-77e794a76cf2",
			"type": "string"
		},
		{
			"key": "scheme",
			"value": "https",
			"type": "string"
		},
		{
			"key": "graph_hostname",
			"value": "dev-analytics-graph.nft.com",
			"type": "string"
		},
		{
			"key": "event_hostname",
			"value": "dev-analytics-events.nft.com",
			"type": "string"
		},
		{
			"key": "aggregation_hostname",
			"value": "dev-analytics-aggregation.nft.com",
			"type": "string"
		},
		{
			"key": "port",
			"value": "443",
			"type": "string"
		}
	]
}