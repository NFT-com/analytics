# path to the schema for the Graph API
schema:
  - schema/schema.graphql

# Where should the generated server code go?
exec:
  filename: graph/generated/generated.go
  package: generated

# Path to generated models
model:
  filename: models/api/generated.go
  package: api

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: ./api
  package: api
  type: Server
  filename: ./api/server.go
  filename_template: '{name}_resolvers.go'

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/NFT-com/indexer-api/models/api"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  NFT:
    model:
      - "github.com/NFT-com/indexer-api/models/api.NFT"
